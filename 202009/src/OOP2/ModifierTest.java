package OOP2;
/*
 제어자(Modifier)
 	- 클래스, 변수, 메서드의 선언부에 사용되어 부가적인 의미 부여
 	- 접근제어자와 그 외 제어자로 분류
 	- 하나의 대상에 여러 개의 제어자를 조합해서 사용 가능
 	- 접근제어자는 단 하나만!!
 	
 	접근 제어자 종류 : public, protected, default, private
 	그 외 : static, final, abstract ...
 	
 	static : 클래스의, 공통적인
 		- 멤버변수, 메서드, 초기화 블럭
 		
 		멤버변수
 			- 모든 인스턴스에 공통적으로 사용되는 클래스 변수 생성
 			- 클래스 변수는 인스턴스 생성하지 않고 사용 가능
 			- 클래스가 메모리에 로드 될 때 사용
 		메서드
 			- 인스턴스를 생성하지 않고도 호출 가능한 static 메서드
 			- static 메서드 내에서는 인스턴스 멤버 직접 사용 X
 		
 	final : 마지막의, 변경될 수 없는
 		- 메서드, 클래스, 멤버변수, 지역변수
 		
 		메서드
 			- 변경될 수 없는 메서드(오버라이딩(= 재정의) 불가)
 		클래스
 			- 변경 될 수 없는 클래스, 확장 불가능한 클래스 생성
 			- final 클래스는 다른 클래스가 상속 X
 		멤버변수, 지역변수
 			- 변수 앞에 final이 붙으면, 변경 불가능한 상수
 			
 	abstract : 추상의, 미완성의
 		- 클래스, 메서드
 		
 		클래스 - 클래스 내부에 추상메서드가 선언되어 있음을 의미
 		메서드 - 선언부만 작성하고 구현부는 작성 X(추상메서드)
*/
class test{
	
	final int NUMBER;	// 상수지만, 선언과 함께 초기화 하지 않고
	
	test() {
		this.NUMBER = 10;	// 생성자에서 단 한번만 초기화 가능!!
	}
}

public class ModifierTest {
	public static void main(String[] args) {
		
	}
}
